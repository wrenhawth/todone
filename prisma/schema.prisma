datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Auth.js models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App-specific models

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  goals         Goal[]
  categories    Category[]
}

model Goal {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startDate   DateTime @default(dbgenerated("(CURRENT_DATE)")) @db.Date
  endDate     DateTime @default(dbgenerated("(CURRENT_DATE + '1 year'::interval)")) @db.Date
  title       String   @db.VarChar(255)
  userId      String
  categoryId  Int
  cadence     Cadence
  repeatEvery Int      @default(1)
  category    Category @relation(fields: [categoryId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  Task        Task[]
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  color     String   @db.VarChar(255)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  Goal      Goal[]
}

model Task {
  id          Int      @id @default(autoincrement())
  goalId      Int
  dueDate     DateTime @db.Date
  completed   Boolean  @default(false)
  completedOn DateTime
  goal        Goal     @relation(fields: [goalId], references: [id])
}

// Enum

enum Cadence {
  DAY
  WEEK
  MONTH
}
